group 'com.paulhoang'
version '1.0-SNAPSHOT'

//required for one jar
buildscript {
    repositories {
        mavenCentral()
        maven{
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'au.com.dius:pact-jvm-provider-gradle_2.11:3.3.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2-rc1'
    }
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'gradle-one-jar'
apply plugin: 'au.com.dius.pact'
apply plugin: 'org.sonarqube'


mainClassName = "com.paulhoang.Application"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


task oneJarBuildTask(type: OneJar) {
    mainClass = 'com.paulhoang.Application'
    archiveName = 'sharesGenerator.jar'
}

dependencies {
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.sparkjava:spark-core:2.3'
    compile 'com.sparkjava:spark-template-mustache:2.3'
    compile 'com.netflix.hystrix:hystrix-core:1.4.21'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.3'
    compile 'org.yaml:snakeyaml:1.16'
    compile 'com.google.code.gson:gson:2.7'

    testCompile 'au.com.dius:pact-jvm-consumer_2.11:3.3.0'
    testCompile 'au.com.dius:pact-jvm-consumer-junit_2.11:3.3.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

pact {

    serviceProviders {

        // You can define as many as you need, but each must have a unique name
        SharesCollector {
            // All the provider properties are optional, and have sensible defaults (shown below)
            protocol = 'http'
            host = '192.168.1.51'
            port = 80
            path = '/'

            // Again, you can define as many consumers for each provider as you need, but each must have a unique name
            hasPactWith('SharesGenerator') {

                // currently supports a file path using file() or a URL using url()
                pactFile = file(project.getProjectDir().getPath() + '/target/pacts/SharesGenerator-SharesCollector.json')

            }

            // Or if you have many pact files in a directory
//            hasPactsWith('manyConsumers') {
//
//                // Will define a consumer for each pact file in the directory.
//                // Consumer name is read from contents of pact file
//                pactFileLocation = file('path/to/pacts')
//
//            }

        }

    }

}

sonarqube {
    properties {
        property "sonar.projectName", "mySharesGenerator"
        property "sonar.projectKey", "mySharesGenerator"
        property "sonar.host.url", "http://192.168.1.51:9000/"
        property "sonar.java.coveragePlugin", "jacoco"
//        property "sonar.jdbc.url", "jdbc:mysql://10.42.58.229:3306/sonar"
//        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    }
}